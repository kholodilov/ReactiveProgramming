package quickcheck

object propsTest {
	val h = new QuickCheckHeap with BinomialHeap
                                                  //> h  : quickcheck.QuickCheckHeap with quickcheck.BinomialHeap = Prop
/*  val heap = h.genHeap.sample.get
  val list = h.heapToList(heap)
  list.sorted */
  val l = h.genList.sample.get                    //> l  : List[quickcheck.propsTest.h.A] = List(1881261253, -435296256, -34866664
                                                  //| 0, 1737057410, -886580554, -1318792502, 1305696451, 1897859293, -1673277605,
                                                  //|  -1589363711, 68452253, -1124999545, 1782748911, 928141325, 1576473455, 4676
                                                  //| 72547, -1867501208, 1380566494, -2036678419, 1147865573, 841912856, -1987811
                                                  //| 269, 631457193, 610382708, 76011426, -878888377, -2120316980, -1793504157, -
                                                  //| 1382711012, -249764295, 82698212, -69357054, 1892646576, -268675177, 1001035
                                                  //| 671, 1700339083, -255442971, 58740546, 1587161772, 148900912, -1225069359, 2
                                                  //| 087206794, 1525046320, 110095786, -637358673, -151327406, 1968786411, -13640
                                                  //| 93377, 216079621, 1906309496, 1903324722, 262416951, -1796373445, -751075548
                                                  //| , 2097663069, -441525727, 1734765874, 732860748, -1985232176, -923748276, -1
                                                  //| 705491351, -1977215026, 1421898268, -547757434, 1129893326, -684146973, -170
                                                  //| 0554627)
  l.min                                           //> res0: quickcheck.propsTest.h.A = -2120316980
  val heap = h.listToHeap(l)                      //> heap  : quickcheck.propsTest.h.H = List(Node(1881261253,0,List()), Node(-435
                                                  //| 296256,1,List(Node(-348666640,0,List()))), Node(-2120316980,6,List(Node(-198
                                                  //| 5232176,5,List(Node(-1364093377,4,List(Node(-1225069359,3,List(Node(-2554429
                                                  //| 71,2,List(Node(58740546,1,List(Node(1587161772,0,List()))), Node(1700339083,
                                                  //| 0,List()))), Node(1525046320,1,List(Node(2087206794,0,List()))), Node(148900
                                                  //| 912,0,List()))), Node(-637358673,2,List(Node(-151327406,1,List(Node(19687864
                                                  //| 11,0,List()))), Node(110095786,0,List()))), Node(1903324722,1,List(Node(1906
                                                  //| 309496,0,List()))), Node(216079621,0,List()))), Node(-1977215026,3,List(Node
                                                  //| (-1700554627,2,List(Node(-547757434,1,List(Node(1129893326,0,List()))), Node
                                                  //| (-684146973,0,List()))), Node(-1705491351,1,List(Node(-923748276,0,List())))
                                                  //| , Node(1421898268,0,List()))), Node(-1796373445,2,List(Node(-751075548,1,Lis
                                                  //| t(Node(2097663069,0,List()))), Node(262416951,0,List()))), Node(-441525727,1
                                                  //| ,List(Node(1734765874,0,
                                                  //| Output exceeds cutoff limit.
  h.findMin(heap)                                 //> res1: quickcheck.propsTest.h.A = -2120316980
}